// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// BMIService is an autogenerated mock type for the BMIService type
type BMIService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BMIService) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *BMIService) Fetch(ctx context.Context, cursor string, num int64) ([]domain.BMI, string, error) {
	ret := _m.Called(ctx, cursor, num)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []domain.BMI
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) ([]domain.BMI, string, error)); ok {
		return rf(ctx, cursor, num)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []domain.BMI); ok {
		r0 = rf(ctx, cursor, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BMI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) string); ok {
		r1 = rf(ctx, cursor, num)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int64) error); ok {
		r2 = rf(ctx, cursor, num)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *BMIService) GetByName(ctx context.Context, name string) ([]domain.BMI, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 []domain.BMI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.BMI, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.BMI); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BMI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *BMIService) Store(_a0 context.Context, _a1 *domain.BMI) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BMI) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBMIService creates a new instance of BMIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBMIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BMIService {
	mock := &BMIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
